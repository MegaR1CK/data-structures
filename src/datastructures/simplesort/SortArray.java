package datastructures.simplesort;


import java.util.Random;

/**
 * Стандартный массив, элементы идут друг за другом.
 */
public class SortArray {

    private final int[] arr;
    private final int size;

    /**
     * Конструктор массива, генерирует массив и заполняет его случайными элементами.
     * @param size Размер массива
     */
    public SortArray(int size) {
        arr = new int[size];
        this.size = size;
        Random random = new Random();
        for (int i = 0; i < size; i++) {
            arr[i] = random.nextInt(100);
        }
    }

    /**
     * Получение элемента из массива
     * @param index индекс элемента
     * @return элемент
     */
    public int get(int index) {
        return arr[index];
    }

    /**
     * Получение размера массива
     * @return размер массива
     */
    public int getSize() {
        return size;
    }

    /**
     * Обмен позициями двух элементов массива по указанным индексам
     */
    public void swap(int firstPos, int secondPos) {
        int temp = arr[secondPos];
        arr[secondPos] = arr[firstPos];
        arr[firstPos] = temp;
    }

    /**
     * Пузырьковая сортировка:
     * <p>
     * 1. Сравниваем два элемента массива. Если первый элемент больше второго, меняем их местами.
     * <p>
     * 2. Переходим на индекс вправо и выполняем пункт 1.
     * <p>
     * 3. Выполняем пункты 1-2, пока не дойдем до конца массива. В результате самый большой элемент массива окажется
     * в конце. Сужаем границу сортировки на 1 элемент с конца, так как область за границей отсортирована.
     * <p>
     * 4. Выполняем пункт 3, пока область сортировки не сузится до 1 элемента.
     * <p>
     *  Массив отсортирован.
     * <p>
     * Сложность алгоритма - O(n^2)
     */
    public void bubbleSort() {
        for (int i = size - 1; i > 0; i--) {
            for (int j = 0; j < i; j++) {
                if (arr[j] > arr[j + 1]) swap(j, j + 1);
            }
        }
    }

    /**
     * Сортировка выбором:
     * <p>
     * 1. Находим минимальный элемент в неотсортированной области (изначально - весь массив)
     * проходя по массиву и сравнивая элементы.
     * <p>
     * 2. Меняем местами первый элемент в неотсортированной области и минимальный элемент.
     * <p>
     * 3. Сужаем неотсортированную область на 1 элемент с начала массива.
     * <p>
     * 4. Выполняем пункты - 1-3, пока неотсортированная область не сузится до 1 элемента.
     * <p>
     *  Массив отсортирован.
     * <p>
     * Сложность алгоритма - O(n^2)
     */
    public void selectionSort() {
        for (int i = 0; i < size - 1; i++) {
            int minValueIndex = i;
            for (int j = i + 1; j < size; j++) {
                if (arr[j] < arr[minValueIndex]) minValueIndex = j;
            }
            swap(i, minValueIndex);
        }
    }

    /**
     * Сортировка вставкой:
     * <p>
     * 1. Задаем частично отсортированную область, состоящую из первого элемента массива.
     * <p>
     * 2. Сохраняем первый элемент в неотсортированной области.
     * <p>
     * 3. Сдвигаем по одному элементу частично отсортированной области справо,
     * пока очередной элемент не станет меньше сохраненного..
     * <p>
     * 4. Вставляем сохраненный элемент перед первым меньшим элементом или в начало массива, если таковых не нашлось.
     * <p>
     * 5. Сужаем неотсортированную область на 1 элемент с начала массива.
     * <p>
     * 6. Повторяем шаги 2-5 пока неотсортированная область не сузится до 1 элемента.
     * <p>
     *  Массив отсортирован.
     * <p>
     * Сложность алгоритма - O(n^2)
     */
    public void insertionSort() {
        for (int i = 1; i < size; i++) {
            int selected = arr[i];
            int j = i;
            while (j > 0 && arr[j - 1] >= selected) {
                arr[j] = arr[j - 1];
                j--;
            }
            arr[j] = selected;
        }
    }
}
